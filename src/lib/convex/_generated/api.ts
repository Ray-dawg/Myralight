/* eslint-disable */
/**
 * Generated API. DO NOT EDIT.
 *
 * This file is generated by the Convex CLI.
 */

import type { ApiFromModules } from "convex/server";

import type * as loads from "../../../../convex/loads";
import type * as loads_actions from "../../../../convex/loads.actions";
import type * as locations from "../../../../convex/locations";
import type * as notifications from "../../../../convex/notifications";
import type * as vehicles from "../../../../convex/vehicles";

/**
 * A type describing your app's public Convex API.
 *
 * This `api` object lets you:
 * 1. Use typechecked Convex query/mutation/action functions in your React components
 * 2. Call Convex functions from other Convex functions
 *
 * @example
 * import { api } from "../convex/_generated/api";
 * const products = await ctx.db.query(api.products.list).collect();
 *
 * @example
 * import { api } from "./convex/_generated/api";
 * const { useQuery } = reactConvex();
 * const products = useQuery(api.products.list);
 */
export const api = {
  loads: {
    acceptLoad: "loads.actions:acceptLoad",
    rejectLoad: "loads.actions:rejectLoad",
    assignLoad: "loads:assignLoad",
    createLoad: "loads:createLoad",
    deleteLoad: "loads:deleteLoad",
    getLoad: "loads:getLoad",
    getLoadStats: "loads:getLoadStats",
    getLoads: "loads:getLoads",
    searchLoads: "loads:searchLoads",
    updateLoad: "loads:updateLoad",
    updateLoadLocation: "loads:updateLoadLocation",
    updateLoadStatus: "loads:updateLoadStatus",
  },
  locations: {
    createLocation: "locations:createLocation",
    deleteLocation: "locations:deleteLocation",
    getLocation: "locations:getLocation",
    getLocations: "locations:getLocations",
    updateLocation: "locations:updateLocation",
  },
  notifications: {
    deleteAllReadNotifications: "notifications:deleteAllReadNotifications",
    deleteNotification: "notifications:deleteNotification",
    getNotifications: "notifications:getNotifications",
    getUnreadNotificationCount: "notifications:getUnreadNotificationCount",
    markAllNotificationsAsRead: "notifications:markAllNotificationsAsRead",
    markNotificationAsRead: "notifications:markNotificationAsRead",
  },
  vehicles: {
    createVehicle: "vehicles:createVehicle",
    getVehicle: "vehicles:getVehicle",
    getVehiclesByCarrier: "vehicles:getVehiclesByCarrier",
    getVehiclesByDriver: "vehicles:getVehiclesByDriver",
    getVehiclesByEquipmentType: "vehicles:getVehiclesByEquipmentType",
    getVehiclesByStatus: "vehicles:getVehiclesByStatus",
    updateVehicle: "vehicles:updateVehicle",
    updateVehicleLocation: "vehicles:updateVehicleLocation",
  },
} as const;

export type Api = ApiFromModules<{
  loads: typeof loads;
  "loads.actions": typeof loads_actions;
  locations: typeof locations;
  notifications: typeof notifications;
  vehicles: typeof vehicles;
}>;
