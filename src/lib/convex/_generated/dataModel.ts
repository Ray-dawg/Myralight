/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@1.10.0.
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { AnyDataModel } from "convex/server";
import type { GenericId } from "convex/values";

/**
 * No schema is defined in your Convex deployment yet.
 */
export type DataModel = {
  bids: {
    amount: number;
    carrierId: GenericId<"carriers">;
    createdAt: number;
    expiresAt?: number;
    loadId: GenericId<"loads">;
    notes?: string;
    responseDate?: number;
    responseNotes?: string;
    status: "pending" | "accepted" | "rejected" | "expired";
    updatedAt: number;
    userId: GenericId<"users">;
  };
  carriers: {
    address: string;
    city: string;
    contactEmail: string;
    contactName: string;
    contactPhone: string;
    country: string;
    createdAt: number;
    dotNumber: string;
    fleetSize: number;
    insuranceExpiryDate?: number;
    insurancePolicyNumber?: string;
    insuranceProvider?: string;
    isActive: boolean;
    isVerified: boolean;
    mcNumber?: string;
    name: string;
    rating?: number;
    state: string;
    updatedAt: number;
    zipCode: string;
  };
  documents: {
    createdAt: number;
    fileSize: number;
    fileUrl: string;
    isActive: boolean;
    loadId: GenericId<"loads">;
    mimeType: string;
    name: string;
    notes?: string;
    type:
      | "bill_of_lading"
      | "proof_of_delivery"
      | "rate_confirmation"
      | "invoice"
      | "weight_ticket"
      | "lumper_receipt"
      | "other";
    uploadDate: number;
    updatedAt: number;
    userId: GenericId<"users">;
    verificationDate?: number;
    verificationStatus?: "pending" | "verified" | "rejected";
    verifiedBy?: GenericId<"users">;
  };
  events: {
    createdAt: number;
    eventType: string;
    loadId: GenericId<"loads">;
    metadata?: any;
    newValue: any;
    notes?: string;
    previousValue?: any;
    timestamp: number;
    userId: GenericId<"users">;
  };
  loads: {
    accessorials?: {
      amount: number;
      notes?: string;
      type: string;
    }[];
    actualDeliveryTime?: number;
    actualPickupTime?: number;
    assignedDate?: number;
    carrierId?: GenericId<"carriers">;
    commodity: string;
    createdAt: number;
    deliveryInstructions?: string;
    deliveryLocationId: GenericId<"locations">;
    deliveryWindowEnd: number;
    deliveryWindowStart: number;
    dimensions?: {
      height: number;
      length: number;
      width: number;
    };
    driverId?: GenericId<"users">;
    equipmentRequirements?: string[];
    equipmentType: string;
    estimatedDistance?: number;
    estimatedDuration?: number;
    estimatedTimeOfArrival?: number;
    hazmat: boolean;
    hazmatDetails?: string;
    invoiceDate?: number;
    invoiceStatus?: "not_invoiced" | "invoiced" | "paid";
    lastLocationUpdate?: {
      latitude: number;
      longitude: number;
      timestamp: number;
    };
    loadType: "ftl" | "ltl" | "partial" | "expedited";
    notes?: string;
    palletCount?: number;
    paymentDate?: number;
    pickupInstructions?: string;
    pickupLocationId: GenericId<"locations">;
    pickupWindowEnd: number;
    pickupWindowStart: number;
    pieceCount?: number;
    rate?: number;
    rateType?: "flat" | "per_mile" | "hourly";
    referenceNumber: string;
    shipperId: GenericId<"users">;
    status:
      | "draft"
      | "posted"
      | "assigned"
      | "in_transit"
      | "delivered"
      | "completed"
      | "cancelled";
    stops?: {
      actualArrivalTime?: number;
      completed: boolean;
      instructions?: string;
      locationId: GenericId<"locations">;
      windowEnd: number;
      windowStart: number;
    }[];
    tags?: string[];
    temperatureRequirements?: {
      max: number;
      min: number;
    };
    trackingEnabled: boolean;
    updatedAt: number;
    vehicleId?: GenericId<"vehicles">;
    weight: number;
  };
  locations: {
    address: string;
    city: string;
    contactEmail?: string;
    contactName?: string;
    contactPhone?: string;
    coordinates: {
      latitude: number;
      longitude: number;
    };
    country: string;
    createdAt: number;
    isActive: boolean;
    locationType:
      | "warehouse"
      | "distribution_center"
      | "port"
      | "terminal"
      | "customer_location"
      | "other";
    name: string;
    operatingHours?: {
      closeTime: string;
      day:
        | "monday"
        | "tuesday"
        | "wednesday"
        | "thursday"
        | "friday"
        | "saturday"
        | "sunday";
      openTime: string;
    }[];
    specialInstructions?: string;
    state: string;
    updatedAt: number;
    zipCode: string;
  };
  notifications: {
    actionUrl?: string;
    createdAt: number;
    isActionRequired: boolean;
    isRead: boolean;
    message: string;
    relatedId?: any;
    relatedType?: string;
    title: string;
    type: string;
    userId: GenericId<"users">;
  };
  ratings: {
    categories?: {
      communication?: number;
      documentation?: number;
      loadCondition?: number;
      onTimeDelivery?: number;
      onTimePickup?: number;
      professionalism?: number;
    };
    comments?: string;
    createdAt: number;
    fromUserId: GenericId<"users">;
    isPublic: boolean;
    loadId: GenericId<"loads">;
    rating: number;
    toCarrierId?: GenericId<"carriers">;
    toUserId: GenericId<"users">;
    updatedAt: number;
  };
  users: {
    address?: string;
    carrierId?: GenericId<"carriers">;
    companyName?: string;
    createdAt: number;
    email: string;
    isActive: boolean;
    lastLogin?: number;
    licenseExpiry?: number;
    licenseNumber?: string;
    name: string;
    phone?: string;
    profileImageUrl?: string;
    role: "admin" | "shipper" | "carrier" | "driver";
    updatedAt: number;
  };
  vehicles: {
    capacity?: number;
    carrierId: GenericId<"carriers">;
    createdAt: number;
    currentDriverId?: GenericId<"users">;
    currentLocation?: {
      lastUpdated: number;
      latitude: number;
      longitude: number;
    };
    dimensions?: {
      height: number;
      length: number;
      width: number;
    };
    equipmentType: string;
    lastMaintenanceDate?: number;
    licensePlate: string;
    make: string;
    model: string;
    nextMaintenanceDate?: number;
    state: string;
    status: "active" | "maintenance" | "out_of_service";
    type: "truck" | "trailer";
    updatedAt: number;
    vin: string;
    year: number;
  };
};

/**
 * The names of all of your Convex tables.
 */
export type TableNames = keyof DataModel;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DataModel[TableName] & {
  _id: Id<TableName>;
  _creationTime: number;
};

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `_id` field.
 * IDs are typed with the table name to distinguish between IDs from different
 * tables.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames> = GenericId<TableName>;

/**
 * A type describing your app's Convex data model.
 *
 * This type is used to parameterize Convex's internal APIs to make them
 * specific to your data model.
 *
 * @internal
 */
export type DataModelFromSchema = AnyDataModel;
