/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@1.10.0.
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { actionGeneric } from "convex/server";
import { httpActionGeneric } from "convex/server";
import { internalActionGeneric } from "convex/server";
import { internalMutationGeneric } from "convex/server";
import { internalQueryGeneric } from "convex/server";
import { mutationGeneric } from "convex/server";
import { queryGeneric } from "convex/server";
import { defineActionGeneric } from "convex/server";
import { defineHttpActionGeneric } from "convex/server";

import type { DataModel } from "./dataModel.js";

/**
 * Define a Convex query function.
 *
 * Query functions are meant to be lightweight reads of your Convex database.
 * They automatically rerun and update your UI when the data they access
 * changes.
 *
 * Query functions can read from your database via the {@link QueryCtx.db} object
 * passed as the first parameter to the query function.
 *
 * Query functions cannot modify your database or call other functions.
 *
 * If you need to modify data or access external services, use a
 * {@link mutation} or an {@link action}.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first
 * argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined query function. Include this in your `convex/_generated/api.js`
 * file to make it available to your client.
 */
export const query = queryGeneric<DataModel>;

/**
 * Define a Convex mutation function.
 *
 * Mutation functions modify your Convex database. They can insert data, update
 * data, or delete data..
 *
 * Mutation functions can read from and write to your database via the
 * {@link MutationCtx.db} object passed as the first parameter to the mutation
 * function.
 *
 * If you need to access external services or want to make multiple requests to
 * your database with the results of earlier requests, use an {@link action}.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its
 * first argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined mutation function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const mutation = mutationGeneric<DataModel>;

/**
 * Define a Convex action function.
 *
 * Action functions can access the internet and call other Convex functions, but
 * they cannot directly read from or write to your database.
 *
 * Action functions can call queries and mutations via the {@link ActionCtx.runQuery}
 * and {@link ActionCtx.runMutation} methods passed as the first parameter to the
 * action function.
 *
 * @param func - The action function. It receives a {@link ActionCtx} as its
 * first argument, which provides access to run queries and mutations and other
 * context, and arguments as its second argument, which contains the arguments
 * passed to the function.
 * @returns The defined action function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const action = actionGeneric<DataModel>;

/**
 * Define a Convex HTTP action.
 *
 * HTTP actions can be invoked by client-side code via HTTP requests and can
 * access the internet, but they cannot directly read from or write to your
 * database.
 *
 * HTTP actions can call queries and mutations via the {@link ActionCtx.runQuery}
 * and {@link ActionCtx.runMutation} methods passed as the first parameter to the
 * action function.
 *
 * @param func - The HTTP action function. It receives a {@link ActionCtx} as its
 * first argument, which provides access to run queries and mutations and other
 * context, and a {@link Request} as its second argument, which contains the HTTP
 * request.
 * @returns The defined HTTP action function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const httpAction = httpActionGeneric<DataModel>;

/**
 * Define a Convex query function.
 *
 * Query functions are meant to be lightweight reads of your Convex database.
 * They automatically rerun and update your UI when the data they access
 * changes.
 *
 * Query functions can read from your database via the {@link QueryCtx.db} object
 * passed as the first parameter to the query function.
 *
 * Query functions cannot modify your database or call other functions.
 *
 * If you need to modify data or access external services, use a
 * {@link mutation} or an {@link action}.
 *
 * @param options - An object with a `args` field specifying the arguments to the
 * function.
 * @param func - The query function. It receives a {@link QueryCtx} as its first
 * argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined query function. Include this in your `convex/_generated/api.js`
 * file to make it available to your client.
 */
export const defineQuery = defineActionGeneric<"query", DataModel>;

/**
 * Define a Convex mutation function.
 *
 * Mutation functions modify your Convex database. They can insert data, update
 * data, or delete data..
 *
 * Mutation functions can read from and write to your database via the
 * {@link MutationCtx.db} object passed as the first parameter to the mutation
 * function.
 *
 * If you need to access external services or want to make multiple requests to
 * your database with the results of earlier requests, use an {@link action}.
 *
 * @param options - An object with a `args` field specifying the arguments to the
 * function.
 * @param func - The mutation function. It receives a {@link MutationCtx} as its
 * first argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined mutation function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const defineMutation = defineActionGeneric<"mutation", DataModel>;

/**
 * Define a Convex action function.
 *
 * Action functions can access the internet and call other Convex functions, but
 * they cannot directly read from or write to your database.
 *
 * Action functions can call queries and mutations via the {@link ActionCtx.runQuery}
 * and {@link ActionCtx.runMutation} methods passed as the first parameter to the
 * action function.
 *
 * @param options - An object with a `args` field specifying the arguments to the
 * function.
 * @param func - The action function. It receives a {@link ActionCtx} as its
 * first argument, which provides access to run queries and mutations and other
 * context, and arguments as its second argument, which contains the arguments
 * passed to the function.
 * @returns The defined action function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const defineAction = defineActionGeneric<"action", DataModel>;

/**
 * Define a Convex HTTP action.
 *
 * HTTP actions can be invoked by client-side code via HTTP requests and can
 * access the internet, but they cannot directly read from or write to your
 * database.
 *
 * HTTP actions can call queries and mutations via the {@link ActionCtx.runQuery}
 * and {@link ActionCtx.runMutation} methods passed as the first parameter to the
 * action function.
 *
 * @param func - The HTTP action function. It receives a {@link ActionCtx} as its
 * first argument, which provides access to run queries and mutations and other
 * context, and a {@link Request} as its second argument, which contains the HTTP
 * request.
 * @returns The defined HTTP action function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const defineHttpAction = defineHttpActionGeneric<DataModel>;

/**
 * Define a Convex internal query function.
 *
 * Internal query functions are meant to be lightweight reads of your Convex
 * database. They can only be called from other Convex functions, not from the
 * client.
 *
 * Query functions can read from your database via the {@link QueryCtx.db} object
 * passed as the first parameter to the query function.
 *
 * Query functions cannot modify your database or call other functions.
 *
 * If you need to modify data or access external services, use a
 * {@link internalMutation} or an {@link internalAction}.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first
 * argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined query function. Include this in your `convex/_generated/api.js`
 * file to make it available to your client.
 */
export const internalQuery = internalQueryGeneric<DataModel>;

/**
 * Define a Convex internal mutation function.
 *
 * Internal mutation functions modify your Convex database. They can insert data,
 * update data, or delete data. They can only be called from other Convex
 * functions, not from the client.
 *
 * Mutation functions can read from and write to your database via the
 * {@link MutationCtx.db} object passed as the first parameter to the mutation
 * function.
 *
 * If you need to access external services or want to make multiple requests to
 * your database with the results of earlier requests, use an
 * {@link internalAction}.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its
 * first argument, which provides access to the database and other context, and
 * arguments as its second argument, which contains the arguments passed to the
 * function.
 * @returns The defined mutation function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const internalMutation = internalMutationGeneric<DataModel>;

/**
 * Define a Convex internal action function.
 *
 * Internal action functions can access the internet and call other Convex
 * functions, but they cannot directly read from or write to your database. They
 * can only be called from other Convex functions, not from the client.
 *
 * Action functions can call queries and mutations via the {@link ActionCtx.runQuery}
 * and {@link ActionCtx.runMutation} methods passed as the first parameter to the
 * action function.
 *
 * @param func - The action function. It receives a {@link ActionCtx} as its
 * first argument, which provides access to run queries and mutations and other
 * context, and arguments as its second argument, which contains the arguments
 * passed to the function.
 * @returns The defined action function. Include this in your
 * `convex/_generated/api.js` file to make it available to your client.
 */
export const internalAction = internalActionGeneric<DataModel>;
